/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.lespace.apprtc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-19")
public class Call implements org.apache.thrift.TBase<Call, Call._Fields>, java.io.Serializable, Cloneable, Comparable<Call> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Call");

  private static final org.apache.thrift.protocol.TField FROM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUUID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TO_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("toUUID", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CallStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CallTupleSchemeFactory();

  public java.lang.String fromName; // required
  public java.lang.String toName; // required
  public java.lang.String fromUUID; // required
  public java.lang.String toUUID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_NAME((short)1, "fromName"),
    TO_NAME((short)2, "toName"),
    FROM_UUID((short)3, "fromUUID"),
    TO_UUID((short)4, "toUUID");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_NAME
          return FROM_NAME;
        case 2: // TO_NAME
          return TO_NAME;
        case 3: // FROM_UUID
          return FROM_UUID;
        case 4: // TO_UUID
          return TO_UUID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_NAME, new org.apache.thrift.meta_data.FieldMetaData("toName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_UUID, new org.apache.thrift.meta_data.FieldMetaData("fromUUID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_UUID, new org.apache.thrift.meta_data.FieldMetaData("toUUID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Call.class, metaDataMap);
  }

  public Call() {
  }

  public Call(
    java.lang.String fromName,
    java.lang.String toName,
    java.lang.String fromUUID,
    java.lang.String toUUID)
  {
    this();
    this.fromName = fromName;
    this.toName = toName;
    this.fromUUID = fromUUID;
    this.toUUID = toUUID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Call(Call other) {
    if (other.isSetFromName()) {
      this.fromName = other.fromName;
    }
    if (other.isSetToName()) {
      this.toName = other.toName;
    }
    if (other.isSetFromUUID()) {
      this.fromUUID = other.fromUUID;
    }
    if (other.isSetToUUID()) {
      this.toUUID = other.toUUID;
    }
  }

  public Call deepCopy() {
    return new Call(this);
  }

  @Override
  public void clear() {
    this.fromName = null;
    this.toName = null;
    this.fromUUID = null;
    this.toUUID = null;
  }

  public java.lang.String getFromName() {
    return this.fromName;
  }

  public Call setFromName(java.lang.String fromName) {
    this.fromName = fromName;
    return this;
  }

  public void unsetFromName() {
    this.fromName = null;
  }

  /** Returns true if field fromName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromName() {
    return this.fromName != null;
  }

  public void setFromNameIsSet(boolean value) {
    if (!value) {
      this.fromName = null;
    }
  }

  public java.lang.String getToName() {
    return this.toName;
  }

  public Call setToName(java.lang.String toName) {
    this.toName = toName;
    return this;
  }

  public void unsetToName() {
    this.toName = null;
  }

  /** Returns true if field toName is set (has been assigned a value) and false otherwise */
  public boolean isSetToName() {
    return this.toName != null;
  }

  public void setToNameIsSet(boolean value) {
    if (!value) {
      this.toName = null;
    }
  }

  public java.lang.String getFromUUID() {
    return this.fromUUID;
  }

  public Call setFromUUID(java.lang.String fromUUID) {
    this.fromUUID = fromUUID;
    return this;
  }

  public void unsetFromUUID() {
    this.fromUUID = null;
  }

  /** Returns true if field fromUUID is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUUID() {
    return this.fromUUID != null;
  }

  public void setFromUUIDIsSet(boolean value) {
    if (!value) {
      this.fromUUID = null;
    }
  }

  public java.lang.String getToUUID() {
    return this.toUUID;
  }

  public Call setToUUID(java.lang.String toUUID) {
    this.toUUID = toUUID;
    return this;
  }

  public void unsetToUUID() {
    this.toUUID = null;
  }

  /** Returns true if field toUUID is set (has been assigned a value) and false otherwise */
  public boolean isSetToUUID() {
    return this.toUUID != null;
  }

  public void setToUUIDIsSet(boolean value) {
    if (!value) {
      this.toUUID = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FROM_NAME:
      if (value == null) {
        unsetFromName();
      } else {
        setFromName((java.lang.String)value);
      }
      break;

    case TO_NAME:
      if (value == null) {
        unsetToName();
      } else {
        setToName((java.lang.String)value);
      }
      break;

    case FROM_UUID:
      if (value == null) {
        unsetFromUUID();
      } else {
        setFromUUID((java.lang.String)value);
      }
      break;

    case TO_UUID:
      if (value == null) {
        unsetToUUID();
      } else {
        setToUUID((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_NAME:
      return getFromName();

    case TO_NAME:
      return getToName();

    case FROM_UUID:
      return getFromUUID();

    case TO_UUID:
      return getToUUID();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FROM_NAME:
      return isSetFromName();
    case TO_NAME:
      return isSetToName();
    case FROM_UUID:
      return isSetFromUUID();
    case TO_UUID:
      return isSetToUUID();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Call)
      return this.equals((Call)that);
    return false;
  }

  public boolean equals(Call that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fromName = true && this.isSetFromName();
    boolean that_present_fromName = true && that.isSetFromName();
    if (this_present_fromName || that_present_fromName) {
      if (!(this_present_fromName && that_present_fromName))
        return false;
      if (!this.fromName.equals(that.fromName))
        return false;
    }

    boolean this_present_toName = true && this.isSetToName();
    boolean that_present_toName = true && that.isSetToName();
    if (this_present_toName || that_present_toName) {
      if (!(this_present_toName && that_present_toName))
        return false;
      if (!this.toName.equals(that.toName))
        return false;
    }

    boolean this_present_fromUUID = true && this.isSetFromUUID();
    boolean that_present_fromUUID = true && that.isSetFromUUID();
    if (this_present_fromUUID || that_present_fromUUID) {
      if (!(this_present_fromUUID && that_present_fromUUID))
        return false;
      if (!this.fromUUID.equals(that.fromUUID))
        return false;
    }

    boolean this_present_toUUID = true && this.isSetToUUID();
    boolean that_present_toUUID = true && that.isSetToUUID();
    if (this_present_toUUID || that_present_toUUID) {
      if (!(this_present_toUUID && that_present_toUUID))
        return false;
      if (!this.toUUID.equals(that.toUUID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFromName()) ? 131071 : 524287);
    if (isSetFromName())
      hashCode = hashCode * 8191 + fromName.hashCode();

    hashCode = hashCode * 8191 + ((isSetToName()) ? 131071 : 524287);
    if (isSetToName())
      hashCode = hashCode * 8191 + toName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromUUID()) ? 131071 : 524287);
    if (isSetFromUUID())
      hashCode = hashCode * 8191 + fromUUID.hashCode();

    hashCode = hashCode * 8191 + ((isSetToUUID()) ? 131071 : 524287);
    if (isSetToUUID())
      hashCode = hashCode * 8191 + toUUID.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Call other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFromName()).compareTo(other.isSetFromName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromName, other.fromName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToName()).compareTo(other.isSetToName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toName, other.toName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromUUID()).compareTo(other.isSetFromUUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUUID, other.fromUUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToUUID()).compareTo(other.isSetToUUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUUID, other.toUUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Call(");
    boolean first = true;

    sb.append("fromName:");
    if (this.fromName == null) {
      sb.append("null");
    } else {
      sb.append(this.fromName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toName:");
    if (this.toName == null) {
      sb.append("null");
    } else {
      sb.append(this.toName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromUUID:");
    if (this.fromUUID == null) {
      sb.append("null");
    } else {
      sb.append(this.fromUUID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUUID:");
    if (this.toUUID == null) {
      sb.append("null");
    } else {
      sb.append(this.toUUID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fromName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromName' was not present! Struct: " + toString());
    }
    if (toName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toName' was not present! Struct: " + toString());
    }
    if (fromUUID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromUUID' was not present! Struct: " + toString());
    }
    if (toUUID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toUUID' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CallStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CallStandardScheme getScheme() {
      return new CallStandardScheme();
    }
  }

  private static class CallStandardScheme extends org.apache.thrift.scheme.StandardScheme<Call> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Call struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromName = iprot.readString();
              struct.setFromNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toName = iprot.readString();
              struct.setToNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromUUID = iprot.readString();
              struct.setFromUUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TO_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toUUID = iprot.readString();
              struct.setToUUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Call struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fromName != null) {
        oprot.writeFieldBegin(FROM_NAME_FIELD_DESC);
        oprot.writeString(struct.fromName);
        oprot.writeFieldEnd();
      }
      if (struct.toName != null) {
        oprot.writeFieldBegin(TO_NAME_FIELD_DESC);
        oprot.writeString(struct.toName);
        oprot.writeFieldEnd();
      }
      if (struct.fromUUID != null) {
        oprot.writeFieldBegin(FROM_UUID_FIELD_DESC);
        oprot.writeString(struct.fromUUID);
        oprot.writeFieldEnd();
      }
      if (struct.toUUID != null) {
        oprot.writeFieldBegin(TO_UUID_FIELD_DESC);
        oprot.writeString(struct.toUUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CallTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CallTupleScheme getScheme() {
      return new CallTupleScheme();
    }
  }

  private static class CallTupleScheme extends org.apache.thrift.scheme.TupleScheme<Call> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Call struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.fromName);
      oprot.writeString(struct.toName);
      oprot.writeString(struct.fromUUID);
      oprot.writeString(struct.toUUID);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Call struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.fromName = iprot.readString();
      struct.setFromNameIsSet(true);
      struct.toName = iprot.readString();
      struct.setToNameIsSet(true);
      struct.fromUUID = iprot.readString();
      struct.setFromUUIDIsSet(true);
      struct.toUUID = iprot.readString();
      struct.setToUUIDIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

